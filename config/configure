#!/usr/bin/env bash

bup_find_prog()
{
    # Prints prog path to stdout or nothing.
    local name="$1" result="$2"
    TLOGN "checking for $name"
    if ! [ "$result" ]; then
        result=`acLookFor "$name"`
    fi
    TLOG " ($result)"
    echo "$result"
}

bup_try_c_code()
{
    local code="$1" tmpdir rc
    if test -z "$code"; then
        AC_FAIL "No code provided to test compile"
    fi
    tmpdir="$(mktemp -d "bup-try-c-compile-XXXXXXX")" || exit $?
    echo "$code" > "$tmpdir/test.c" || exit $?
    $AC_CC -Wall -Werror -c -o "$tmpdir/test" "$tmpdir/test.c"
    rc=$?
    rm -r "$tmpdir" || exit $?
    return $rc
}

TARGET=bup

. ./configure.inc

AC_INIT $TARGET

if ! AC_PROG_CC; then
    LOG " You need to have a functional C compiler to build $TARGET"
    exit 1
fi

MAKE="$(bup_find_prog make $MAKE)"
if test -z "$MAKE"; then
    MAKE="$(bup_find_prog gmake "$GMAKE")"
fi

if test -z "$MAKE"; then
    AC_FAIL "ERROR: unable to find make"
fi

if ! ($MAKE --version | grep "GNU Make"); then
    AC_FAIL "ERROR: $MAKE is not GNU Make"
fi

MAKE_VERSION=`$MAKE --version | grep "GNU Make" | awk '{print $3}'`
if [ -z "$MAKE_VERSION" ]; then
    AC_FAIL "ERROR: $MAKE --version does not return sensible output?"
fi
expr "$MAKE_VERSION" '>=' '3.81' || AC_FAIL "ERROR: $MAKE must be >= version 3.81"

bup_python="$PYTHON"
test -z "$bup_python" && bup_python="$(bup_find_prog python2.7 '')"
test -z "$bup_python" && bup_python="$(bup_find_prog python2.6 '')"
test -z "$bup_python" && bup_python="$(bup_find_prog python2 '')"
test -z "$bup_python" && bup_python="$(bup_find_prog python '')"
if test -z "$bup_python"; then
    AC_FAIL "ERROR: unable to find python"
else
    echo "#!/bin/sh" > ../cmd/python-cmd.sh
    printf "exec %q \"\$@\"" "$bup_python" >> ../cmd/python-cmd.sh
    chmod u+x ../cmd/python-cmd.sh
    cd ../cmd && ln -sf python-cmd.sh bup-python
fi

if test -z "$(bup_find_prog git '')"; then
    AC_FAIL "ERROR: unable to find git"
fi

# For stat.
AC_CHECK_HEADERS sys/stat.h
AC_CHECK_HEADERS sys/types.h

# For stat and mincore.
AC_CHECK_HEADERS unistd.h

# For mincore.
AC_CHECK_HEADERS sys/mman.h

# For FS_IOC_GETFLAGS and FS_IOC_SETFLAGS.
AC_CHECK_HEADERS linux/fs.h
AC_CHECK_HEADERS sys/ioctl.h

# On GNU/kFreeBSD utimensat is defined in GNU libc, but won't work.
if [ -z "$OS_GNU_KFREEBSD" ]; then
    AC_CHECK_FUNCS utimensat
fi
AC_CHECK_FUNCS utimes
AC_CHECK_FUNCS lutimes


AC_CHECK_FUNCS mincore

mincore_incore_code="
#if 0$ac_defined_HAVE_UNISTD_H
#include <unistd.h>
#endif
#if 0$ac_defined_HAVE_SYS_MMAN_H
#include <sys/mman.h>
#endif
int main(int argc, char **argv)
{
    if (MINCORE_INCORE)
      return 0;
}
"

mincore_buf_type_code()
{
    local vec_type="$1"
    echo "
#include <sys/mman.h>
int main(int argc, char **argv)
{
    void *x = 0;
    $vec_type *buf = 0;
    return mincore(x, 0, buf);
}" || exit $?
}

if test "$ac_defined_HAVE_MINCORE"; then
    TLOGN "checking for MINCORE_INCORE"
    if bup_try_c_code "$mincore_incore_code"; then
        AC_DEFINE BUP_HAVE_MINCORE_INCORE 1
        TLOG ' (found)'
    else
        TLOG ' (not found)'
    fi

    TLOGN "checking mincore buf type"
    if bup_try_c_code "$(mincore_buf_type_code char)"; then
        AC_DEFINE BUP_MINCORE_BUF_TYPE 'char'
        TLOG ' (char)'
    elif bup_try_c_code "$(mincore_buf_type_code 'unsigned char')"; then
        AC_DEFINE BUP_MINCORE_BUF_TYPE 'unsigned char'
        TLOG ' (unsigned char)'
    else
        AC_FAIL "ERROR: unexpected mincore definition; please notify bup-list@googlegroups.com"
    fi
fi


AC_CHECK_FIELD stat st_atim sys/types.h sys/stat.h unistd.h
AC_CHECK_FIELD stat st_mtim sys/types.h sys/stat.h unistd.h
AC_CHECK_FIELD stat st_ctim sys/types.h sys/stat.h unistd.h

AC_CHECK_FIELD stat st_atimensec sys/types.h sys/stat.h unistd.h
AC_CHECK_FIELD stat st_mtimensec sys/types.h sys/stat.h unistd.h
AC_CHECK_FIELD stat st_ctimensec sys/types.h sys/stat.h unistd.h

AC_CHECK_FIELD tm tm_gmtoff time.h

AC_OUTPUT config.vars
